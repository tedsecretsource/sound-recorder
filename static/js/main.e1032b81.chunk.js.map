{"version":3,"sources":["components/Recording/index.tsx","components/Visualizer/index.tsx","components/Recorder/index.tsx","components/RecorderProvider.tsx","components/Footer/index.tsx","App.tsx","serviceWorkerRegistration.js","reportWebVitals.js","404.jsx","index.tsx"],"names":["Recording","props","streamURL","name","onDeleteHandler","onEditNameHandler","id","controls","src","preload","role","className","onClick","e","title","Visualizer","analyser","dataArray","bufferLength","previousTimeStamp","stream","barColor","canvasRef","useRef","requestIdRef","useEffect","visualize","current","requestAnimationFrame","tick","cancelAnimationFrame","timestamp","draw","audioCtx","window","AudioContext","webkitAudioContext","source","createMediaStreamSource","createAnalyser","fftSize","frequencyBinCount","Uint8Array","connect","canvas","canvasCtx","getContext","WIDTH","width","HEIGHT","height","getByteTimeDomainData","barHeight","barWidth","x","clearRect","i","fillStyle","fillRect","ref","Recorder","mediaRecorder","useState","setRecorderState","recordings","setRecordings","defaultRecordClass","recordButtonClassesText","chunks","useMemo","onstart","console","log","onstop","ondataavailable","push","data","toggleRecording","state","start","stop","blob","Blob","mimeType","audioURL","URL","createObjectURL","currentRecordings","Date","toISOString","split","join","performance","now","toString","updateRecordingsList","editRecordingName","target","parentNode","attributes","value","newRecordings","targetItem","filter","item","index","indexOf","newName","prompt","splice","deleteRecording","confirm","classList","add","setTimeout","map","recording","RecoderProvider","mr","setMr","navigator","mediaDevices","getUserMedia","video","audio","then","theStream","MediaRecorder","error","catch","Footer","href","rel","App","RecorderProvider","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorPage","useRouteError","statusText","message","router","createBrowserRouter","path","element","errorElement","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1032b81.chunk.js","sourcesContent":["import './style.css'\n\ninterface RecordingProps {\n    streamURL: string,\n    name: string,\n    onDeleteHandler: (e) => void,\n    onEditNameHandler: (e) => void,\n    id: string\n}\n\nconst Recording = (props: RecordingProps) => {\n\n    const { streamURL, name, onDeleteHandler, onEditNameHandler, id } = props\n\n    const deleteRecording = (e) => {\n        onDeleteHandler(e)\n    }\n\n    const editName = (e) => {\n        onEditNameHandler(e)\n    }\n\n    return (\n        <article id={id}>\n            <audio controls={true} src={streamURL} preload=\"auto\" role=\"application\">Sorry, your browser doesn't support recording audio.</audio>\n            <p>\n                <span className=\"name\" role=\"presentation\">{name}</span>\n                <button onClick={editName} className=\"editName\" title=\"Click to edit name\" aria-label=\"Click to edit name\">✏️</button>\n            </p>\n            <button onClick={deleteRecording} className=\"delete\">Delete</button>\n        </article>\n    )\n}\n\nexport default Recording;","import { useEffect, useRef } from 'react';\nimport './style.css'\n\ninterface VisualizerProps {\n    stream: MediaStream, \n    barColor: Array<number>\n}\n\nconst Visualizer = (props: VisualizerProps) => {\n    const {stream, barColor} = props\n    const canvasRef = useRef(null)\n    const requestIdRef = useRef(null);\n    let analyser: AnalyserNode, dataArray: Uint8Array, bufferLength: number, previousTimeStamp: number\n    \n    useEffect(() => {\n        visualize(stream)\n        requestIdRef.current = requestAnimationFrame(tick)\n        return () => {\n            cancelAnimationFrame(requestIdRef.current)\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    \n    const tick = (timestamp: number) => {\n        if (!canvasRef.current) return\n        draw(timestamp, canvasRef.current)\n        requestIdRef.current = requestAnimationFrame(tick);\n    };\n    \n    /**\n     * Renders a visual that shows the microphone is receiving input\n     * \n     * This code is particularly complex because you have to know all about\n     * audioContext _and_ animation (the canvas element) in order to get it\n     * to work. I know almost nothing about both.\n     * \n     * @param {*} stream \n     */\n    const visualize = (stream: MediaStream) => {\n        let audioCtx: AudioContext\n        if( ! audioCtx ) {\n            audioCtx = new (window.AudioContext || (window as any).webkitAudioContext)()\n        }\n      \n        const source = audioCtx.createMediaStreamSource(stream)\n      \n        analyser = audioCtx.createAnalyser()\n        analyser.fftSize = 256\n        bufferLength = analyser.frequencyBinCount\n        dataArray = new Uint8Array(bufferLength)\n      \n        source.connect(analyser)\n\n        /**\n         * The following line would be required if we allow the user to, say,\n         * set the gain on the input. The gain is essentially a filter that\n         * is applied before being sent to the speakers.\n         */\n        // analyser.connect(audioCtx.destination);\n    }\n\n    /**\n     * Draws a frame of animation\n     * \n     * We check the previousTimeStamp because if it is the same as the current\n     * timestamp, we don't want to animate as the frame is of little value in\n     * this context. We only animate the differences.\n     * \n     * @param {float} timestamp \n     */\n    const draw = (timestamp: number, canvas: HTMLCanvasElement) => {\n        if( previousTimeStamp !== timestamp ) {\n            const canvasCtx = canvas.getContext(\"2d\");\n            const WIDTH = canvas.width\n            const HEIGHT = canvas.height\n        \n            // https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData\n            analyser.getByteTimeDomainData(dataArray);\n    \n            let barWidth: number = (WIDTH / bufferLength)\n            let barHeight: number\n            let x = 0\n            \n            canvasCtx.clearRect(0, 0, WIDTH, HEIGHT)\n            \n            for(let i = 0; i < bufferLength; i++) {\n                barHeight = dataArray[i]\n                canvasCtx.fillStyle = `rgb(${barColor[0]}, ${barColor[1]}, ${barColor[2]})`\n                canvasCtx.fillRect(x, HEIGHT, barWidth, 0-barHeight/2)\n    \n                x += barWidth + 1\n            }\n            previousTimeStamp = timestamp\n        }\n    }\n\n      \n    \n    return (\n        <>\n            <canvas ref={canvasRef} className=\"visualizer\"></canvas>\n        </>\n    );\n    \n}\n\nexport default Visualizer","import { useEffect, useMemo, useState } from 'react'\nimport Recording from '../Recording'\nimport Visualizer from '../Visualizer'\nimport './style.css'\n\ninterface recorderProps {\n    mediaRecorder?: MediaRecorder\n}\n  \nconst Recorder = (props?: recorderProps) => {\n    const { mediaRecorder } = props\n    const [recorderState, setRecorderState] = useState('inactive')\n    const [recordings, setRecordings] = useState<any[]>([]);\n    const defaultRecordClass = 'record-play'\n    let recordButtonClassesText = defaultRecordClass\n    let chunks: any[] = useMemo(() => [], [])\n\n    useEffect(() => {\n        if( mediaRecorder ) {\n\n            mediaRecorder.onstart = () => {\n                console.log('started recording')\n            }\n        \n            mediaRecorder.onstop = () => {\n                console.log('stopped recording')\n            }\n        \n            mediaRecorder.ondataavailable = (e) => {\n                chunks.push(e.data)\n            }\n        }\n    }, [mediaRecorder, chunks])\n\n    const updateRecordingsList = () => {\n        const blob = new Blob(chunks, { 'type' : mediaRecorder.mimeType })\n        const audioURL = window.URL.createObjectURL(blob)\n    \n        // push the new recording to the recordings list\n        setRecordings(currentRecordings => {\n            return [...currentRecordings, ...[{\n                stream: audioURL,\n                name: new Date().toISOString().split('.')[0].split('T').join(' '),\n                id: `id${window.performance.now().toString()}`\n            }]]\n        })\n    \n        chunks = []\n    }\n\n    const toggleRecording = () => {\n        if (mediaRecorder.state === 'inactive') {\n            mediaRecorder.start(1000)\n        } else {\n            mediaRecorder.stop()\n            updateRecordingsList()\n        }\n        setRecorderState(mediaRecorder.state)\n    }\n\n    const editRecordingName = (e) => {\n        let id = e.target.parentNode.parentNode.attributes.id.value\n        let newRecordings = [...recordings]\n        let targetItem = recordings.filter((item) => {\n            if( item.id === id ) {\n                return item\n            }\n            return false\n        })\n        let index = recordings.indexOf(targetItem[0])\n        let newName = window.prompt('Enter a new name', targetItem[0].name) ?? targetItem[0].name // necessary because this returns null if the user doesn't enter anything\n        targetItem[0].name = newName\n        newRecordings.splice(index, 1, targetItem[0])\n        setRecordings(newRecordings)\n    }\n\n    const deleteRecording = (e) => {\n        let id = e.target.parentNode.attributes.id.value\n        let deleteRecording = window.confirm('Are you sure you want to delete this recording?')\n        if (deleteRecording === true) {\n            let newRecordings = recordings.filter((item) => {\n                if (id !== item.id) {\n                    return true\n                }\n                return false\n            })\n            e.target.parentNode.classList.add('vanish')\n            setTimeout(() => {\n                setRecordings([...newRecordings])\n            }, 900)\n        }\n    }\n\n    const renderAudio = () => {\n        let audios = recordings.map((recording, index) => {\n            return (\n                <Recording \n                    streamURL={recording.stream} \n                    key={recording.id} \n                    name={recording.name} \n                    id={recording.id} \n                    onDeleteHandler={deleteRecording} \n                    onEditNameHandler={editRecordingName} />\n            )\n        })\n        \n        return audios\n\n    }\n\n    const recorderUI = () => {\n        recordButtonClassesText = mediaRecorder.state === 'recording' ? `${defaultRecordClass} recording-audio` : defaultRecordClass\n        return (\n            <>\n                <Visualizer stream={mediaRecorder.stream} barColor={[18,124,85]} />\n                <button onClick={toggleRecording} className={recordButtonClassesText}>{mediaRecorder.state === 'recording' ? 'Stop' : 'Record'}</button>\n                <section>\n                    {renderAudio()}\n                </section>\n            </>\n        )\n    }\n\n    const recorderRenderer = () => {\n        if( mediaRecorder === null ) {\n            return <button className=\"record-play\" title=\"Please either allow or decline the use of your microphone\">Loading…</button>\n        } else {\n            return recorderUI()\n        }\n      }\n      \n      return (\n        recorderRenderer()\n    )\n}\n\nexport default Recorder\n","import { useState, useEffect } from 'react'\nimport Recorder from './Recorder'\n\nconst RecoderProvider = () => {\n    const [mr, setMr] = useState<MediaRecorder | null>(null)\n\n    useEffect(() => {\n        navigator.mediaDevices.getUserMedia({ video: false, audio: true })\n        .then((theStream) => {\n            try {\n                setMr(new MediaRecorder(theStream, { mimeType: 'audio/webm' }))\n            } catch (error) {\n                console.log('This browser does not support mime type: audio/webm')\n            }\n            \n            try {\n                setMr(new MediaRecorder(theStream, { mimeType: 'audio/mp4' }))\n            } catch (error) {\n                console.log('This browser does not support mime type: audio/mp4')\n            }\n        })\n        .catch((error) => {\n            console.log('You need to allow access to your microphone to use this app')\n        })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <Recorder mediaRecorder={mr} />\n    )\n}\n\nexport default RecoderProvider","import './style.css'\n\nconst Footer = () => {\n    return (\n        <footer>\n            <p>© Copyright Secret Source Technology 2022</p>\n            <p><a href=\"./terms_of_use\">Terms of Use</a></p>\n            <p><a href=\"https://github.com/tedsecretsource/sound-recorder/blob/main/LICENSE.md\" target=\"_blank\" rel=\"noreferrer\">License</a></p>\n        </footer>\n    )\n}\n\nexport default Footer","import RecorderProvider from './components/RecorderProvider'\nimport Footer from './components/Footer'\nimport './App.css';\n// import useGetUserMedia from \"./hooks/useGetUserMedia\";\n\nfunction App() {\n  return (\n    <>\n    <header>\n      <h1>Sound Recorder</h1>\n    </header>\n    <main>\n      <RecorderProvider />\n    </main>\n    <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useRouteError } from \"react-router-dom\";\n\nexport default function ErrorPage() {\n  const error = useRouteError();\n  console.error(error);\n\n  return (\n    <div id=\"error-page\">\n      <h1>Oops!</h1>\n      <p>Sorry, an unexpected error has occurred.</p>\n      <p>\n        <i>{error.statusText || error.message}</i>\n      </p>\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  createBrowserRouter,\n  RouterProvider,\n  Route,\n} from \"react-router-dom\";\nimport ErrorPage from './404';\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <App />,\n    errorElement: <ErrorPage />,\n  },\n]);\n\nReactDOM.render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
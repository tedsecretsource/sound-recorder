{"version":3,"sources":["components/Recording/index.tsx","components/Visualizer/index.tsx","hooks/useMediaRecorder.ts","components/Recorder/index.tsx","App.tsx","serviceWorkerRegistration.js","reportWebVitals.js","index.tsx"],"names":["Recording","props","streamURL","name","onDeleteHandler","onEditNameHandler","id","controls","src","preload","role","className","onClick","e","title","Visualizer","analyser","dataArray","bufferLength","previousTimeStamp","stream","barColor","canvasRef","useRef","requestIdRef","useEffect","visualize","current","requestAnimationFrame","tick","cancelAnimationFrame","timestamp","draw","audioCtx","window","AudioContext","webkitAudioContext","source","createMediaStreamSource","createAnalyser","fftSize","frequencyBinCount","Uint8Array","connect","canvas","canvasCtx","getContext","WIDTH","width","HEIGHT","height","getByteTimeDomainData","barHeight","barWidth","x","clearRect","i","fillStyle","fillRect","ref","useMediaRecorder","useState","recorder","setRecorder","isRecording","setIsRecording","recordings","setRecordings","audioMimeType","chunks","initMediaRecorder","error","console","log","mt","mr","MediaRecorder","mimeType","onstart","handleStart","onstop","handleStop","ondataavailable","handleDataAvailable","blob","Blob","audioURL","URL","createObjectURL","currentRecordings","Date","toISOString","split","join","performance","now","toString","push","data","Recorder","defaultRecordClass","recordButtonClassesText","useMemo","recordingStateText","editRecordingName","target","parentNode","attributes","value","newRecordings","targetItem","filter","item","index","indexOf","newName","prompt","splice","deleteRecording","confirm","classList","add","setTimeout","stop","start","map","recording","App","setStream","getUserMedia","navigator","mediaDevices","video","audio","then","catch","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.424a7a2d.chunk.js","sourcesContent":["import './style.css'\n\ninterface RecordingProps {\n    streamURL: string,\n    name: string,\n    onDeleteHandler: (e) => void,\n    onEditNameHandler: (e) => void,\n    id: string\n}\n\nconst Recording = (props: RecordingProps) => {\n\n    const { streamURL, name, onDeleteHandler, onEditNameHandler, id } = props\n\n    const deleteRecording = (e) => {\n        onDeleteHandler(e)\n    }\n\n    const editName = (e) => {\n        onEditNameHandler(e)\n    }\n\n    return (\n        <article id={id}>\n            <audio controls={true} src={streamURL} preload=\"auto\" role=\"application\">Sorry, your browser doesn't support recording audio.</audio>\n            <p>\n                <span className=\"name\" role=\"presentation\">{name}</span>\n                <button onClick={editName} className=\"editName\" title=\"Click to edit name\" aria-label=\"Click to edit name\">✏️</button>\n            </p>\n            <button onClick={deleteRecording} className=\"delete\">Delete</button>\n        </article>\n    )\n}\n\nexport default Recording;","import { useEffect, useRef } from 'react';\nimport './style.css'\n\ninterface VisualizerProps {\n    stream: MediaStream, \n    barColor: Array<number>\n}\n\nconst Visualizer = (props: VisualizerProps) => {\n    const {stream, barColor} = props\n    const canvasRef = useRef(null)\n    const requestIdRef = useRef(null);\n    let analyser: AnalyserNode, dataArray: Uint8Array, bufferLength: number, previousTimeStamp: number\n    \n    useEffect(() => {\n        visualize(stream)\n        requestIdRef.current = requestAnimationFrame(tick)\n        return () => {\n            cancelAnimationFrame(requestIdRef.current)\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    \n    const tick = (timestamp: number) => {\n        if (!canvasRef.current) return\n        draw(timestamp, canvasRef.current)\n        requestIdRef.current = requestAnimationFrame(tick);\n    };\n    \n    /**\n     * Renders a visual that shows the microphone is receiving input\n     * \n     * This code is particularly complex because you have to know all about\n     * audioContext _and_ animation (the canvas element) in order to get it\n     * to work. I know almost nothing about both.\n     * \n     * @param {*} stream \n     */\n    const visualize = (stream: MediaStream) => {\n        let audioCtx: AudioContext\n        if( ! audioCtx ) {\n            audioCtx = new (window.AudioContext || (window as any).webkitAudioContext)()\n        }\n      \n        const source = audioCtx.createMediaStreamSource(stream)\n      \n        analyser = audioCtx.createAnalyser()\n        analyser.fftSize = 256\n        bufferLength = analyser.frequencyBinCount\n        dataArray = new Uint8Array(bufferLength)\n      \n        source.connect(analyser)\n\n        /**\n         * The following line would be required if we allow the user to, say,\n         * set the gain on the input. The gain is essentially a filter that\n         * is applied before being sent to the speakers.\n         */\n        // analyser.connect(audioCtx.destination);\n    }\n\n    /**\n     * Draws a frame of animation\n     * \n     * We check the previousTimeStamp because if it is the same as the current\n     * timestamp, we don't want to animate as the frame is of little value in\n     * this context. We only animate the differences.\n     * \n     * @param {float} timestamp \n     */\n    const draw = (timestamp: number, canvas: HTMLCanvasElement) => {\n        if( previousTimeStamp !== timestamp ) {\n            const canvasCtx = canvas.getContext(\"2d\");\n            const WIDTH = canvas.width\n            const HEIGHT = canvas.height\n        \n            // https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData\n            analyser.getByteTimeDomainData(dataArray);\n    \n            let barWidth: number = (WIDTH / bufferLength)\n            let barHeight: number\n            let x = 0\n            \n            canvasCtx.clearRect(0, 0, WIDTH, HEIGHT)\n            \n            for(let i = 0; i < bufferLength; i++) {\n                barHeight = dataArray[i]\n                canvasCtx.fillStyle = `rgb(${barColor[0]}, ${barColor[1]}, ${barColor[2]})`\n                canvasCtx.fillRect(x, HEIGHT, barWidth, 0-barHeight/2)\n    \n                x += barWidth + 1\n            }\n            previousTimeStamp = timestamp\n        }\n    }\n\n      \n    \n    return (\n        <>\n            <canvas ref={canvasRef} className=\"visualizer\"></canvas>\n        </>\n    );\n    \n}\n\nexport default Visualizer","import {useEffect, useState} from \"react\";\n\ninterface useMediaRecorderProps {\n  stream: MediaStream\n}\n\n/**\n * This media recorder hook keeps all the logic needed to perform an audio recording decoupling it from any component\n * so it can be reused if needed.\n *\n * This way, when it comes to testing you only need to mock this `recorder` hook and its returned values.\n *\n * The hook in use would look like this:\n * const { recording, recordings, setRecordings, isRecording } = useMediaRecorded(stream);\n *\n * The `setRecordings` method is exposed so that we can perform modifications to the list of recordings from the component\n * avoiding to bloat the logic of this hook (tough it could also be a good idea to do so) but we kept it like this for simplicity\n *\n * @param {Object} stream\n * @returns {{\n * recorder: { start: Function, stop: Function },\n * isRecording: boolean,\n * recordings: any[],\n * setRecordings: Function\n * }}\n *\n */\nconst useMediaRecorder = (props: useMediaRecorderProps) => {\n  const { stream } = props;\n  const [recorder, setRecorder] = useState<MediaRecorder | null>(null);\n  const [isRecording, setIsRecording] = useState<boolean>(false);\n  const [recordings, setRecordings] = useState<any[]>([]);\n  let audioMimeType: string = 'audio/webm';\n  let chunks: any[] = []\n\n  useEffect(() => {\n    try {\n      initMediaRecorder(stream, 'audio/webm')\n    } catch (error) {\n      console.log('This browser does not support mime type: audio/webm');\n    }\n    \n    try {\n      initMediaRecorder(stream, 'audio/mp4')\n    } catch (error) {\n      console.log('This browser does not support mime type: audio/mp4');\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const initMediaRecorder = (stream: MediaStream, mt: string) => {\n    audioMimeType = mt\n    const mr = new MediaRecorder(stream, { mimeType: mt });\n    mr.onstart = handleStart\n    mr.onstop = handleStop\n    mr.ondataavailable = handleDataAvailable\n    setRecorder(mr)\n  }\n  \n  const handleStart = () => {\n    console.log('started recording')\n    setIsRecording(true);\n  }\n\n  const handleStop = () => {\n    const blob = new Blob(chunks, { 'type' : audioMimeType })\n    const audioURL = window.URL.createObjectURL(blob)\n    console.log('stopped recording')\n\n    // push the new recording to the recordings list\n    setRecordings(currentRecordings => {\n      return [...currentRecordings, ...[{\n        stream: audioURL,\n        name: new Date().toISOString().split('.')[0].split('T').join(' '),\n        id: `id${window.performance.now().toString()}`\n      }]]\n    })\n\n    chunks = []\n    setIsRecording(false);\n  }\n\n  const handleDataAvailable = (e) => {\n    chunks.push(e.data)\n  }\n\n  return {\n    recorder,\n    recordings,\n    setRecordings,\n    isRecording,\n  }\n}\n\nexport default useMediaRecorder","import { useMemo } from 'react'\nimport Recording from '../Recording'\nimport Visualizer from '../Visualizer'\nimport './style.css'\nimport useMediaRecorder from \"../../hooks/useMediaRecorder\";\n\ninterface RecorderProps {\n    stream: MediaStream\n}\n\nconst Recorder = (props: RecorderProps) => {\n    const { stream } = props\n    const { recorder, recordings, setRecordings, isRecording } = useMediaRecorder({stream});\n\n    const defaultRecordClass = 'record-play'\n    const recordButtonClassesText = useMemo(() => isRecording ? `${defaultRecordClass} recording-audio` : defaultRecordClass, [isRecording])\n    const recordingStateText = useMemo(() => isRecording ? 'Stop' : 'Record', [isRecording])\n\n    const toggleRecording = () => {\n        if (!isRecording) {\n            recorder.start(1000)\n        } else {\n            recorder.stop();\n        }\n    }\n\n    const editRecordingName = (e) => {\n        let id = e.target.parentNode.parentNode.attributes.id.value\n        let newRecordings = [...recordings]\n        let targetItem = recordings.filter((item) => {\n            if( item.id === id ) {\n                return item\n            }\n            return false\n        })\n        let index = recordings.indexOf(targetItem[0])\n        let newName = window.prompt('Enter a new name', targetItem[0].name) ?? targetItem[0].name // necessary because this returns null if the user doesn't enter anything\n        targetItem[0].name = newName\n        newRecordings.splice(index, 1, targetItem[0])\n        setRecordings(newRecordings)\n    }\n\n    const deleteRecording = (e) => {\n        let id = e.target.parentNode.attributes.id.value\n        let deleteRecording = window.confirm('Are you sure you want to delete this recording?')\n        if (deleteRecording === true) {\n            let newRecordings = recordings.filter((item) => {\n                if (id !== item.id) {\n                    return true\n                }\n                return false\n            })\n            e.target.parentNode.classList.add('vanish')\n            setTimeout(() => {\n                setRecordings([...newRecordings])\n            }, 900)\n        }\n    }\n\n    const renderAudio = () => {\n        let audios = recordings.map((recording, index) => {\n            return (\n                <Recording \n                    streamURL={recording.stream} \n                    key={recording.id} \n                    name={recording.name} \n                    id={recording.id} \n                    onDeleteHandler={deleteRecording} \n                    onEditNameHandler={editRecordingName} />\n            )\n        })\n        \n        return audios\n\n    }\n\n    return (\n        <>\n            <Visualizer stream={stream} barColor={[18,124,85]} />\n            <button onClick={toggleRecording} className={recordButtonClassesText}>{recordingStateText}</button>\n            <section>\n                {renderAudio()}\n            </section>\n        </>\n    )\n}\n\nexport default Recorder\n","import Recorder from './components/Recorder'\nimport './App.css';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const constraints = {audio: true}\n  const [stream, setStream] = useState<MediaStream | null>(null)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    // we call this here because we are setting state and if you set state\n    // on initial render, it will cause a re-render loop\n    getUserMedia()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[])\n\n  const getUserMedia = async () => {\n    navigator.mediaDevices.getUserMedia({video: false, audio: true})\n      .then((stream) => {\n        setStream(stream)\n      })\n      .catch((error) => {\n        console.log(error)\n      })\n  }\n\n  const recoderRenderer = () => {\n    if( stream === null ) {\n      return <button className=\"record-play\">Loading…</button>\n    }\n    return (\n      <Recorder stream={stream} />\n    )\n  }\n  \n  return (\n    <>\n    <header>\n      <h1>Sound Recorder</h1>\n    </header>\n    <main>\n      {recoderRenderer()}\n    </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
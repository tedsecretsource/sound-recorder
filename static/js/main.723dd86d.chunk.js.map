{"version":3,"sources":["components/Recording/index.tsx","components/Visualizer/index.tsx","components/Recorder/index.tsx","components/RecorderProvider.tsx","components/Footer/index.tsx","App.tsx","components/TermsOfUse/index.tsx","serviceWorkerRegistration.js","reportWebVitals.js","404.jsx","index.tsx"],"names":["Recording","props","streamURL","name","onDeleteHandler","onEditNameHandler","id","controls","src","preload","role","className","onClick","e","title","Visualizer","analyser","dataArray","bufferLength","previousTimeStamp","stream","barColor","canvasRef","useRef","requestIdRef","useEffect","visualize","current","requestAnimationFrame","tick","cancelAnimationFrame","timestamp","draw","audioCtx","window","AudioContext","webkitAudioContext","source","createMediaStreamSource","createAnalyser","fftSize","frequencyBinCount","Uint8Array","connect","canvas","canvasCtx","getContext","WIDTH","width","HEIGHT","height","getByteTimeDomainData","barHeight","barWidth","x","clearRect","i","fillStyle","fillRect","ref","Recorder","mediaRecorder","useState","setRecorderState","recordings","setRecordings","defaultRecordClass","recordButtonClassesText","chunks","useMemo","onstart","console","log","onstop","ondataavailable","push","data","toggleRecording","state","start","stop","blob","Blob","mimeType","audioURL","URL","createObjectURL","currentRecordings","Date","toISOString","split","join","performance","now","toString","updateRecordingsList","editRecordingName","target","parentNode","attributes","value","newRecordings","targetItem","filter","item","index","indexOf","newName","prompt","splice","deleteRecording","confirm","classList","add","setTimeout","map","recording","RecoderProvider","mr","setMr","navigator","mediaDevices","getUserMedia","video","audio","then","theStream","MediaRecorder","audioBitsPerSecond","error","catch","Footer","to","href","rel","App","location","useLocation","outlet","setOutlet","pathname","RecorderProvider","TermsOfUse","terms","setTerms","termsURL","process","fetch","response","text","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorPage","useRouteError","statusText","message","router","createHashRouter","path","element","errorElement","children","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"oVAkCeA,EAxBG,SAACC,GAEf,IAAQC,EAA4DD,EAA5DC,UAAWC,EAAiDF,EAAjDE,KAAMC,EAA2CH,EAA3CG,gBAAiBC,EAA0BJ,EAA1BI,kBAAmBC,EAAOL,EAAPK,GAU7D,OACI,0BAASA,GAAIA,EAAb,UACI,uBAAOC,UAAU,EAAMC,IAAKN,EAAWO,QAAQ,OAAOC,KAAK,cAA3D,kEACA,8BACI,sBAAMC,UAAU,OAAOD,KAAK,eAA5B,SAA4CP,IAC5C,wBAAQS,QATH,SAACC,GACdR,EAAkBQ,EACrB,EAOsCF,UAAU,WAAWG,MAAM,qBAAqB,aAAW,qBAAtF,6BAEJ,wBAAQF,QAfQ,SAACC,GACrBT,EAAgBS,EACnB,EAayCF,UAAU,SAA5C,sBAGX,EC0EcI,G,MAlGI,SAACd,GAChB,IAGIe,EAAwBC,EAAuBC,EAAsBC,EAHlEC,EAAoBnB,EAApBmB,OAAQC,EAAYpB,EAAZoB,SACTC,EAAYC,iBAAO,MACnBC,EAAeD,iBAAO,MAG5BE,qBAAU,WAGN,OAFAC,EAAUN,GACVI,EAAaG,QAAUC,sBAAsBC,GACtC,WACHC,qBAAqBN,EAAaG,QACrC,CAEJ,GAAE,IAEH,IAAME,EAAO,SAAPA,EAAQE,GACLT,EAAUK,UACfK,EAAKD,EAAWT,EAAUK,SAC1BH,EAAaG,QAAUC,sBAAsBC,GAChD,EAWKH,EAAY,SAACN,GACf,IAAIa,EACEA,IACFA,EAAW,IAAKC,OAAOC,cAAiBD,OAAeE,qBAG3D,IAAMC,EAASJ,EAASK,wBAAwBlB,IAEhDJ,EAAWiB,EAASM,kBACXC,QAAU,IACnBtB,EAAeF,EAASyB,kBACxBxB,EAAY,IAAIyB,WAAWxB,GAE3BmB,EAAOM,QAAQ3B,EAQlB,EAWKgB,EAAO,SAACD,EAAmBa,GAC7B,GAAIzB,IAAsBY,EAAY,CAClC,IAAMc,EAAYD,EAAOE,WAAW,MAC9BC,EAAQH,EAAOI,MACfC,EAASL,EAAOM,OAGtBlC,EAASmC,sBAAsBlC,GAE/B,IACImC,EADAC,EAAoBN,EAAQ7B,EAE5BoC,EAAI,EAERT,EAAUU,UAAU,EAAG,EAAGR,EAAOE,GAEjC,IAAI,IAAIO,EAAI,EAAGA,EAAItC,EAAcsC,IAC7BJ,EAAYnC,EAAUuC,GACtBX,EAAUY,UAAV,cAA6BpC,EAAS,GAAtC,aAA6CA,EAAS,GAAtD,aAA6DA,EAAS,GAAtE,KACAwB,EAAUa,SAASJ,EAAGL,EAAQI,EAAU,EAAED,EAAU,GAEpDE,GAAKD,EAAW,EAEpBlC,EAAoBY,CACvB,CACJ,EAID,OACI,mCACI,wBAAQ4B,IAAKrC,EAAWX,UAAU,gBAI7C,GCgCciD,G,MA/HE,SAAC3D,GACd,IAAQ4D,EAAkB5D,EAAlB4D,cACR,EAA0CC,mBAAS,YAAnD,mBAAsBC,GAAtB,WACA,EAAoCD,mBAAgB,IAApD,mBAAOE,EAAP,KAAmBC,EAAnB,KACMC,EAAqB,cACvBC,EAA0BD,EAC1BE,EAAgBC,mBAAQ,iBAAM,EAAN,GAAU,IAEtC5C,qBAAU,WACFoC,IAEAA,EAAcS,QAAU,WACpBC,QAAQC,IAAI,oBACf,EAEDX,EAAcY,OAAS,WACnBF,QAAQC,IAAI,oBACf,EAEDX,EAAca,gBAAkB,SAAC7D,GAC7BuD,EAAOO,KAAK9D,EAAE+D,KACjB,EAER,GAAE,CAACf,EAAeO,IAEnB,IAgBMS,EAAkB,WACQ,aAAxBhB,EAAciB,MACdjB,EAAckB,MAAM,MAEpBlB,EAAcmB,OApBO,WACzB,IAAMC,EAAO,IAAIC,KAAKd,EAAQ,CAAE,KAASP,EAAcsB,WACjDC,EAAWlD,OAAOmD,IAAIC,gBAAgBL,GAG5ChB,GAAc,SAAAsB,GACV,MAAM,GAAN,mBAAWA,GAAsB,CAAC,CAC9BnE,OAAQgE,EACRjF,MAAM,IAAIqF,MAAOC,cAAcC,MAAM,KAAK,GAAGA,MAAM,KAAKC,KAAK,KAC7DrF,GAAG,KAAD,OAAO4B,OAAO0D,YAAYC,MAAMC,cAEzC,IAED1B,EAAS,EACZ,CAOO2B,IAEJhC,EAAiBF,EAAciB,MAClC,EAEKkB,EAAoB,SAACnF,GAAO,IAAD,EACzBP,EAAKO,EAAEoF,OAAOC,WAAWA,WAAWC,WAAW7F,GAAG8F,MAClDC,EAAa,YAAOrC,GACpBsC,EAAatC,EAAWuC,QAAO,SAACC,GAChC,OAAIA,EAAKlG,KAAOA,GACLkG,CAGd,IACGC,EAAQzC,EAAW0C,QAAQJ,EAAW,IACtCK,EAAO,UAAGzE,OAAO0E,OAAO,mBAAoBN,EAAW,GAAGnG,aAAnD,QAA4DmG,EAAW,GAAGnG,KACrFmG,EAAW,GAAGnG,KAAOwG,EACrBN,EAAcQ,OAAOJ,EAAO,EAAGH,EAAW,IAC1CrC,EAAcoC,EACjB,EAEKS,EAAkB,SAACjG,GACrB,IAAIP,EAAKO,EAAEoF,OAAOC,WAAWC,WAAW7F,GAAG8F,MACvCU,EAAkB5E,OAAO6E,QAAQ,mDACrC,IAAwB,IAApBD,EAA0B,CAC1B,IAAIT,EAAgBrC,EAAWuC,QAAO,SAACC,GACnC,OAAIlG,IAAOkG,EAAKlG,EAInB,IACDO,EAAEoF,OAAOC,WAAWc,UAAUC,IAAI,UAClCC,YAAW,WACPjD,EAAc,YAAIoC,GACrB,GAAE,IACN,CACJ,EAwCC,OAPwB,OAAlBxC,EACO,wBAAQlD,UAAU,cAAcG,MAAM,4DAAtC,4BAdXqD,EAAkD,cAAxBN,EAAciB,MAAd,UAAyCZ,EAAzC,oBAAgFA,EAEtG,qCACI,cAAC,EAAD,CAAY9C,OAAQyC,EAAczC,OAAQC,SAAU,CAAC,GAAG,IAAI,MAC5D,wBAAQT,QAASiE,EAAiBlE,UAAWwD,EAA7C,SAA+F,cAAxBN,EAAciB,MAAwB,OAAS,WACtH,yBAASnE,UAAU,kBAAnB,SAtBKqD,EAAWmD,KAAI,SAACC,EAAWX,GACpC,OACI,cAAC,EAAD,CACIvG,UAAWkH,EAAUhG,OAErBjB,KAAMiH,EAAUjH,KAChBG,GAAI8G,EAAU9G,GACdF,gBAAiB0G,EACjBzG,kBAAmB2F,GAJdoB,EAAU9G,GAM1B,SA8BR,GCtGc+G,EA7BS,WACpB,MAAoBvD,mBAA+B,MAAnD,mBAAOwD,EAAP,KAAWC,EAAX,KAuBA,OArBA9F,qBAAU,WACN+F,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAOC,OAAO,IAC1DC,MAAK,SAACC,GACH,IACIP,EAAM,IAAIQ,cAAcD,EAAW,CAAE3C,SAAU,2BAA4B6C,mBAAoB,SAGlG,CAFC,MAAOC,GACL1D,QAAQC,IAAI,sDACf,CAED,IACI+C,EAAM,IAAIQ,cAAcD,EAAW,CAAE3C,SAAU,YAAa6C,mBAAoB,SAGnF,CAFC,MAAOC,GACL1D,QAAQC,IAAI,qDACf,CACJ,IACA0D,OAAM,SAACD,GACJ1D,QAAQC,IAAI,8DACf,GAEJ,GAAE,IAGC,cAAC,EAAD,CAAUX,cAAeyD,GAEhC,ECjBca,G,MAVA,WACX,OACI,mCACI,6EACA,4BAAG,cAAC,IAAD,CAAMC,GAAG,uBAAT,kCACH,4BAAG,mBAAGC,KAAK,yEAAyEpC,OAAO,SAASqC,IAAI,aAArG,yBAGd,G,MCsBcC,MA3Bf,WAEE,IAAIC,EAAWC,cAEf,EAA4B3E,mBAAS,cAAC,IAAD,KAArC,mBAAO4E,EAAP,KAAeC,EAAf,KAUA,OARAlH,qBAAU,WACkB,MAAtB+G,EAASI,SACXD,EAAU,cAACE,EAAD,KAEVF,EAAU,cAAC,IAAD,IAEb,GAAE,CAACH,IAGF,qCACA,iCACE,6BAAI,cAAC,IAAD,CAAMJ,GAAG,IAAT,gCAEN,+BACGM,IAEH,cAAC,EAAD,MAGH,EC+EcI,EA5GI,WACjB,MAA0BhF,mBAAS,IAAnC,mBAAOiF,EAAP,KAAcC,EAAd,KAaA,OAXAvH,qBAAU,WACR,IAAIwH,EAAQ,UAAMC,kBAAN,sBACZC,MAAMF,GACHpB,MAAK,SAAAuB,GACJ,OAAOA,EAASC,MACjB,IACAxB,MAAK,SAAAwB,GACJL,EAASK,EACV,GACJ,GAAE,CAACN,IAKF,cAFA,CAEA,iBACE,oBAAIzI,GAAG,0BAAP,yCACN,2DACA,oBAAIA,GAAG,UAAP,sBACA,uKACA,2IACA,0SACA,8LACA,oBAAIA,GAAG,0CAAP,0DACA,uKAAyI,mBAAG+H,KAAK,2BAAR,0CAAzI,6XACA,uRACA,ibACA,sHACA,oBAAI/H,GAAG,cAAP,0BACA,+BACA,uQACA,kHAEA,oBAAIA,GAAG,qBAAP,mCACA,+BACA,8IACA,yHACA,8HACA,0HACA,gUACA,+KAEA,oBAAIA,GAAG,kCAAP,iDACA,oNACA,oBAAIA,GAAG,4BAAP,4CACA,+BACA,sJACA,iJACA,+HACA,+MACA,2KACA,sMACA,0bACA,qPAEA,oBAAIA,GAAG,6BAAP,0CACA,+BACA,0JACA,8FACA,8LACA,wNACA,iXAEA,oBAAIA,GAAG,qBAAP,iCACA,+BACA,kRACA,2LACA,2KACA,2KACA,4LACA,sNAEA,oBAAIA,GAAG,mBAAP,gCACA,0iBACA,oBAAIA,GAAG,8BAAP,4CACA,+BACA,yIACA,qMACA,kMAEA,oBAAIA,GAAG,oBAAP,gCACA,gYACA,oBAAIA,GAAG,mDAAP,oEACA,8cACA,wyBACA,+aACA,oBAAIA,GAAG,wBAAP,qCACA,+BACA,0LACA,wVACA,uaAEA,oBAAIA,GAAG,wBAAP,qCACA,utBACA,oBAAIA,GAAG,kBAAP,6BACA,0zBACA,oBAAIA,GAAG,oBAAP,iCACA,kRACA,4ZACA,iXACA,oBAAIA,GAAG,gBAAP,4BACA,khBAGC,EChGmBgJ,QACW,cAA7BpH,OAAOsG,SAASe,UAEe,UAA7BrH,OAAOsG,SAASe,UAEhBrH,OAAOsG,SAASe,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACT,GAEJ,ECRc,SAASO,IACtB,IAAMhC,EAAQiC,cAGd,OAFA3F,QAAQ0D,MAAMA,GAGZ,sBAAK3H,GAAG,aAAR,UACE,uCACA,yEACA,4BACE,4BAAI2H,EAAMkC,YAAclC,EAAMmC,cAIrC,CCAD,IAAMC,EAASC,YAAiB,CAC9B,CACEC,KAAM,IACNC,QAAS,cAAC,EAAD,IACTC,aAAc,cAACR,EAAD,IACdS,SAAU,CACR,CACEH,KAAM,uBACNC,QAAS,cAAC,EAAD,KAEX,CACED,KAAM,mBACNC,QAAS,cAAC3B,EAAD,SAMjB8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAgBR,OAAQA,MAE1BS,SAASC,eAAe,SH0FpB,kBAAmBvD,WACrBA,UAAUwD,cAAcC,MACrBpD,MAAK,SAACqD,GACLA,EAAaC,YACd,IACAjD,OAAM,SAACD,GACN1D,QAAQ0D,MAAMA,EAAMmC,QACrB,IGtFPX,G","file":"static/js/main.723dd86d.chunk.js","sourcesContent":["import './style.css'\n\ninterface RecordingProps {\n    streamURL: string,\n    name: string,\n    onDeleteHandler: (e) => void,\n    onEditNameHandler: (e) => void,\n    id: string\n}\n\nconst Recording = (props: RecordingProps) => {\n\n    const { streamURL, name, onDeleteHandler, onEditNameHandler, id } = props\n\n    const deleteRecording = (e) => {\n        onDeleteHandler(e)\n    }\n\n    const editName = (e) => {\n        onEditNameHandler(e)\n    }\n\n    return (\n        <article id={id}>\n            <audio controls={true} src={streamURL} preload=\"auto\" role=\"application\">Sorry, your browser doesn't support recording audio.</audio>\n            <p>\n                <span className=\"name\" role=\"presentation\">{name}</span>\n                <button onClick={editName} className=\"editName\" title=\"Click to edit name\" aria-label=\"Click to edit name\">✏️</button>\n            </p>\n            <button onClick={deleteRecording} className=\"delete\">Delete</button>\n        </article>\n    )\n}\n\nexport default Recording;","import { useEffect, useRef } from 'react';\nimport './style.css'\n\ninterface VisualizerProps {\n    stream: MediaStream, \n    barColor: Array<number>\n}\n\nconst Visualizer = (props: VisualizerProps) => {\n    const {stream, barColor} = props\n    const canvasRef = useRef(null)\n    const requestIdRef = useRef(null);\n    let analyser: AnalyserNode, dataArray: Uint8Array, bufferLength: number, previousTimeStamp: number\n    \n    useEffect(() => {\n        visualize(stream)\n        requestIdRef.current = requestAnimationFrame(tick)\n        return () => {\n            cancelAnimationFrame(requestIdRef.current)\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    \n    const tick = (timestamp: number) => {\n        if (!canvasRef.current) return\n        draw(timestamp, canvasRef.current)\n        requestIdRef.current = requestAnimationFrame(tick);\n    };\n    \n    /**\n     * Renders a visual that shows the microphone is receiving input\n     * \n     * This code is particularly complex because you have to know all about\n     * audioContext _and_ animation (the canvas element) in order to get it\n     * to work. I know almost nothing about both.\n     * \n     * @param {*} stream \n     */\n    const visualize = (stream: MediaStream) => {\n        let audioCtx: AudioContext\n        if( ! audioCtx ) {\n            audioCtx = new (window.AudioContext || (window as any).webkitAudioContext)()\n        }\n      \n        const source = audioCtx.createMediaStreamSource(stream)\n      \n        analyser = audioCtx.createAnalyser()\n        analyser.fftSize = 256\n        bufferLength = analyser.frequencyBinCount\n        dataArray = new Uint8Array(bufferLength)\n      \n        source.connect(analyser)\n\n        /**\n         * The following line would be required if we allow the user to, say,\n         * set the gain on the input. The gain is essentially a filter that\n         * is applied before being sent to the speakers.\n         */\n        // analyser.connect(audioCtx.destination);\n    }\n\n    /**\n     * Draws a frame of animation\n     * \n     * We check the previousTimeStamp because if it is the same as the current\n     * timestamp, we don't want to animate as the frame is of little value in\n     * this context. We only animate the differences.\n     * \n     * @param {float} timestamp \n     */\n    const draw = (timestamp: number, canvas: HTMLCanvasElement) => {\n        if( previousTimeStamp !== timestamp ) {\n            const canvasCtx = canvas.getContext(\"2d\");\n            const WIDTH = canvas.width\n            const HEIGHT = canvas.height\n        \n            // https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData\n            analyser.getByteTimeDomainData(dataArray);\n    \n            let barWidth: number = (WIDTH / bufferLength)\n            let barHeight: number\n            let x = 0\n            \n            canvasCtx.clearRect(0, 0, WIDTH, HEIGHT)\n            \n            for(let i = 0; i < bufferLength; i++) {\n                barHeight = dataArray[i]\n                canvasCtx.fillStyle = `rgb(${barColor[0]}, ${barColor[1]}, ${barColor[2]})`\n                canvasCtx.fillRect(x, HEIGHT, barWidth, 0-barHeight/2)\n    \n                x += barWidth + 1\n            }\n            previousTimeStamp = timestamp\n        }\n    }\n\n      \n    \n    return (\n        <>\n            <canvas ref={canvasRef} className=\"visualizer\"></canvas>\n        </>\n    );\n    \n}\n\nexport default Visualizer","import { useEffect, useMemo, useState } from 'react'\nimport Recording from '../Recording'\nimport Visualizer from '../Visualizer'\nimport './style.css'\n\ninterface recorderProps {\n    mediaRecorder?: MediaRecorder\n}\n  \nconst Recorder = (props?: recorderProps) => {\n    const { mediaRecorder } = props\n    const [recorderState, setRecorderState] = useState('inactive')\n    const [recordings, setRecordings] = useState<any[]>([]);\n    const defaultRecordClass = 'record-play'\n    let recordButtonClassesText = defaultRecordClass\n    let chunks: any[] = useMemo(() => [], [])\n\n    useEffect(() => {\n        if( mediaRecorder ) {\n\n            mediaRecorder.onstart = () => {\n                console.log('started recording')\n            }\n        \n            mediaRecorder.onstop = () => {\n                console.log('stopped recording')\n            }\n        \n            mediaRecorder.ondataavailable = (e) => {\n                chunks.push(e.data)\n            }\n        }\n    }, [mediaRecorder, chunks])\n\n    const updateRecordingsList = () => {\n        const blob = new Blob(chunks, { 'type' : mediaRecorder.mimeType })\n        const audioURL = window.URL.createObjectURL(blob)\n    \n        // push the new recording to the recordings list\n        setRecordings(currentRecordings => {\n            return [...currentRecordings, ...[{\n                stream: audioURL,\n                name: new Date().toISOString().split('.')[0].split('T').join(' '),\n                id: `id${window.performance.now().toString()}`\n            }]]\n        })\n    \n        chunks = []\n    }\n\n    const toggleRecording = () => {\n        if (mediaRecorder.state === 'inactive') {\n            mediaRecorder.start(1000)\n        } else {\n            mediaRecorder.stop()\n            updateRecordingsList()\n        }\n        setRecorderState(mediaRecorder.state)\n    }\n\n    const editRecordingName = (e) => {\n        let id = e.target.parentNode.parentNode.attributes.id.value\n        let newRecordings = [...recordings]\n        let targetItem = recordings.filter((item) => {\n            if( item.id === id ) {\n                return item\n            }\n            return false\n        })\n        let index = recordings.indexOf(targetItem[0])\n        let newName = window.prompt('Enter a new name', targetItem[0].name) ?? targetItem[0].name // necessary because this returns null if the user doesn't enter anything\n        targetItem[0].name = newName\n        newRecordings.splice(index, 1, targetItem[0])\n        setRecordings(newRecordings)\n    }\n\n    const deleteRecording = (e) => {\n        let id = e.target.parentNode.attributes.id.value\n        let deleteRecording = window.confirm('Are you sure you want to delete this recording?')\n        if (deleteRecording === true) {\n            let newRecordings = recordings.filter((item) => {\n                if (id !== item.id) {\n                    return true\n                }\n                return false\n            })\n            e.target.parentNode.classList.add('vanish')\n            setTimeout(() => {\n                setRecordings([...newRecordings])\n            }, 900)\n        }\n    }\n\n    const renderAudio = () => {\n        let audios = recordings.map((recording, index) => {\n            return (\n                <Recording \n                    streamURL={recording.stream} \n                    key={recording.id} \n                    name={recording.name} \n                    id={recording.id} \n                    onDeleteHandler={deleteRecording} \n                    onEditNameHandler={editRecordingName} />\n            )\n        })\n        \n        return audios\n\n    }\n\n    const recorderUI = () => {\n        recordButtonClassesText = mediaRecorder.state === 'recording' ? `${defaultRecordClass} recording-audio` : defaultRecordClass\n        return (\n            <>\n                <Visualizer stream={mediaRecorder.stream} barColor={[18,124,85]} />\n                <button onClick={toggleRecording} className={recordButtonClassesText}>{mediaRecorder.state === 'recording' ? 'Stop' : 'Record'}</button>\n                <section className=\"recordings-list\">\n                    {renderAudio()}\n                </section>\n            </>\n        )\n    }\n\n    const recorderRenderer = () => {\n        if( mediaRecorder === null ) {\n            return <button className=\"record-play\" title=\"Please either allow or decline the use of your microphone\">Loading…</button>\n        } else {\n            return recorderUI()\n        }\n      }\n      \n      return (\n        recorderRenderer()\n    )\n}\n\nexport default Recorder\n","import { useState, useEffect } from 'react'\nimport Recorder from './Recorder'\n\nconst RecoderProvider = () => {\n    const [mr, setMr] = useState<MediaRecorder | null>(null)\n\n    useEffect(() => {\n        navigator.mediaDevices.getUserMedia({ video: false, audio: true })\n        .then((theStream) => {\n            try {\n                setMr(new MediaRecorder(theStream, { mimeType: 'audio/webm;codecs=\"opus\"', audioBitsPerSecond: 1441000 }))\n            } catch (error) {\n                console.log('This browser does not support mime type: audio/webm')\n            }\n            \n            try {\n                setMr(new MediaRecorder(theStream, { mimeType: 'audio/mp4', audioBitsPerSecond: 1441000 }))\n            } catch (error) {\n                console.log('This browser does not support mime type: audio/mp4')\n            }\n        })\n        .catch((error) => {\n            console.log('You need to allow access to your microphone to use this app')\n        })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <Recorder mediaRecorder={mr} />\n    )\n}\n\nexport default RecoderProvider","import { Link } from 'react-router-dom'\nimport './style.css'\n\nconst Footer = () => {\n    return (\n        <footer>\n            <p>© Copyright Secret Source Technology 2022</p>\n            <p><Link to=\"terms-and-conditions\">Terms & Conditions</Link></p>\n            <p><a href=\"https://github.com/tedsecretsource/sound-recorder/blob/main/LICENSE.md\" target=\"_blank\" rel=\"noreferrer\">License</a></p>\n        </footer>\n    )\n}\n\nexport default Footer","import { useState, useEffect } from 'react'\nimport { Link, Outlet, useLocation } from \"react-router-dom\"\nimport RecorderProvider from './components/RecorderProvider'\nimport Footer from './components/Footer'\nimport './App.css';\n\nfunction App() {\n\n  let location = useLocation()\n\n  const [outlet, setOutlet] = useState(<Outlet />)\n\n  useEffect(() => {\n    if( location.pathname === '/' ) {\n      setOutlet(<RecorderProvider />)\n    } else {\n      setOutlet(<Outlet />)\n    }\n  }, [location])\n\n  return (\n    <>\n    <header>\n      <h1><Link to=\"/\">Sound Recorder</Link></h1>\n    </header>\n    <main>\n      {outlet}\n    </main>\n    <Footer />\n    </>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\nconst TermsOfUse = () => {\n  const [terms, setTerms] = useState('');\n\n  useEffect(() => {\n    let termsURL = `${process.env.PUBLIC_URL}/terms_of_use.html`;\n    fetch(termsURL)\n      .then(response => {\n        return response.text()\n      })\n      .then(text => {\n        setTerms(text)\n      })\n  }, [terms]);\n\n  return (\n    // <div\n    //   dangerouslySetInnerHTML={{__html: terms}}></div>\n    <div>\n      <h1 id=\"termsofusesoundrecorder\">Terms of Use Sound Recorder</h1>\n<p>Last revised on 11-11-2022</p>\n<h2 id=\"thegist\">The Gist</h2>\n<p>Secret Source Technology produces the Sound Recorder web application, which we hope you use. If you use it, please use it responsibly.</p>\n<p>For paid accounts, you'll be charged on a monthly basis. You can cancel anytime, but there are no refunds.</p>\n<p>The Terms of Sound Recorder, Sound Recorder itself, and our prices can change at any time. We'll warn you 30 days in advance of any price changes. We'll try to warn you about major changes to the Terms of Sound Recorder or Sound Recorder, but we make no guarantees.</p>\n<p>That's the basic idea, but You must read through the entire Terms of Sound Recorder below and agree with all the details before You use this web application.</p>\n<h2 id=\"youragreementwithsecretsourcetechnology\">Your Agreement with Secret Source Technology</h2>\n<p>Your use of the Secret Source Technology Sound Recorder is governed by this agreement (the \"Terms\"). \"Secret Source Technology\" means <a href=\"https://secret-source.eu\">Secret Source Technology SLU</a>. The \"Sound Recorder\" means Sound Recorders Secret Source Technology makes available including our web sites ([https://secret-source.eu]), our blog, our API, and any other software, sites, and services offered by Secret Source Technology in connection to any of those. \"Content\" means all content generated by Secret Source Technology on your behalf (including metric data).</p>\n<p>In order to use Sound Recorder, You (the \"Customer\", \"You\", or \"Your\") must first agree to the Terms. You understand and agree that Secret Source Technology will treat Your use of Sound Recorder as acceptance of the Terms from that point onwards.</p>\n<p>Secret Source Technology may make changes to the Terms from time to time. You may reject the changes by terminating Your account or closing the application if no account is associted with your use of Sound Recorder. You understand and agree that if You use Sound Recorder after the date on which the Terms have changed, Secret Source Technology will treat Your use as acceptance of the updated Terms.</p>\n<p>If you have any question about the Terms, please contact us at info@secret-source.eu.</p>\n<h2 id=\"youraccount\">Your Account</h2>\n<ul>\n<li>You may not use Sound Recorder if You are a person barred from receiving Sound Recorder under the laws of the United States or other countries, including the country in which You are resident or from which You use Sound Recorder.</li>\n<li>You must be a human. Accounts created by automated methods are not permitted.</li>\n</ul>\n<h2 id=\"useofsoundrecorder\">Use of Sound Recorder</h2>\n<ul>\n<li>You must provide accurate and complete registration information any time You register to use Sound Recorder.</li>\n<li>You are responsible for the security of Your passwords and for any use of Your account.</li>\n<li>Your use of Sound Recorder must comply with all applicable laws, regulations and ordinances.</li>\n<li>You agree to not engage in any activity that interferes with or disrupts Sound Recorder.</li>\n<li>Secret Source Technology reserves the right to enforce quotas and usage limits (to any resources, including the API) at its sole discretion, with or without notice, which may result in Secret Source Technology disabling or throttling your usage of Sound Recorder for any amount of time.</li>\n<li>You may not allow multiple people to use the same account or otherwise access Sound Recorder in a manner intended to avoid incurring fees.</li>\n</ul>\n<h2 id=\"soundrecorderpoliciesandprivacy\">Sound Recorder Policies and Privacy</h2>\n<p>Sound Recorder shall be subject to the privacy policy for Sound Recorder (below). You agree to the use of Your data in accordance with Secret Source Technology's privacy policies.</p>\n<h2 id=\"feesforuseofsoundrecorder\">Fees for Use of Sound Recorder</h2>\n<ul>\n<li>Sound Recorder may be provided to You without charge up with certain limits or for a certain \"trial\" period of time.</li>\n<li>Usage over this limit (or after the \"trial\" period) requires Your purchase of additional resources or services.</li>\n<li>For all purchased resources and services, we will charge Your credit card on a monthly basis.</li>\n<li>Payments are non-refundable. There will be no refunds or credits for partial months of service, upgrade/downgrade refunds, or refunds for months unused with an open account.</li>\n<li>Charges are solely based on Secret Source Technology's measurements of Your use of Sound Recorder, unless otherwise agreed to in writing.</li>\n<li>All fees are exclusive of all taxes, levies, or duties imposed by taxing authorities, and You shall be responsible for payment of all such taxes, levies, or duties.</li>\n<li>You acknowledge and agree that any credit card and related billing and payment information that You provide to Secret Source Technology may be shared by Secret Source Technology with companies who work on Secret Source Technology's behalf, such as payment processors and/or credit agencies, solely for the purposes of checking credit, effecting payment to Secret Source Technology and servicing Your account.</li>\n<li>Secret Source Technology may change its fees and payment policies for Sound Recorder by notifying You at least thirty (30) days before the beginning of the billing cycle in which such change will take effect.</li>\n</ul>\n<h2 id=\"cancellationandtermination\">Cancellation and Termination</h2>\n<ul>\n<li>You must cancel Your account via [URL]. An email or phone request to cancel Your account is not considered cancellation.</li>\n<li>You will not receive any refunds if You cancel Your account.</li>\n<li>If You cancel Sound Recorder before the end of Your current paid up month, Your cancellation will take effect immediately and You will not be charged again.</li>\n<li>All of Customer Recordings and Content will, within a reasonable amount of time to be determined solely by Secret Source Technology, be deleted from Sound Recorder upon cancellation.</li>\n<li>You agree that Secret Source Technology, in its sole discretion and for any or no reason, may terminate or suspend Your account. You agree that any termination of Your access to Sound Recorder may be without prior notice, and You agree that Secret Source Technology will not be liable to You or any third party for such termination.</li>\n</ul>\n<h3 id=\"customerrecordings\">Customer Recordings</h3>\n<ul>\n<li>Secret Source Technology claims no ownership or control over any Customer Recordings. You retain copyright and any other rights You already hold in the Customer Recordings and You are responsible for protecting those rights, as appropriate.</li>\n<li>You agree to assume full responsibility for configuring Sound Recorder to allow appropriate access to any Customer Recordings provided to Sound Recorder.</li>\n<li>You understand that public recordings display Customer Recordings to any party on the Internet, including search engines and web spiders.</li>\n<li>You understand that private recordings will display Customer Recordings to You and any collaborators that you designate for that project.</li>\n<li>You retain sole responsibility for any collaborators or third-party services that you allow to view Customer Recordings and entrust them at your own risk.</li>\n<li>Secret Source Technology is not responsible if you fail to configure, or misconfigure, your recordings and inadvertently allow unauthorized parties view any Customer Recordings.</li>\n</ul>\n<h2 id=\"ideasandfeedback\">Ideas and Feedback</h2>\n<p>You may choose to or we may invite You to submit comments or ideas about Sound Recorder, including but not limited to ideas about improving Sound Recorder or our products (\"Ideas\"). By submitting any Idea, You agree that Your disclosure is unsolicited and without restriction and will not place Secret Source Technology under any fiduciary or other obligation, and that we are free to use the Idea without any additional compensation to You, and/or to disclose the Idea on a non-confidential basis or otherwise to anyone.</p>\n<h2 id=\"modificationofsoundrecorder\">Modification of Sound Recorder</h2>\n<ul>\n<li>You acknowledge and agree that Sound Recorder may change from time to time without prior notice to You.</li>\n<li>Changes include, without limitation, changes to fee and payment policies, security patches, added or removed functionality, and other enhancements or restrictions.</li>\n<li>Secret Source Technology shall not be liable to you or to any third party for any modification, price change, suspension or discontinuance of Sound Recorder.</li>\n</ul>\n<h2 id=\"externalresources\">External Resources</h2>\n<p>Sound Recorder may include hyperlinks to other web sites or content or resources or email content. You acknowledge and agree that Secret Source Technology is not responsible for the availability of any such external sites or resources, and does not endorse any advertising, products or other materials on or available from such web sites or resources.</p>\n<h3 id=\"licensefromsecretsourcetechnologyandrestrictions\">License from Secret Source Technology and Restrictions</h3>\n<p>Secret Source Technology gives You a personal, worldwide, royalty-free, non-assignable and non-exclusive license to use the software provided to You by Secret Source Technology as part of Sound Recorder as provided to You by Secret Source Technology. This license is for the sole purpose of enabling You to use and enjoy the benefit of Sound Recorder as provided by Secret Source Technology, in the manner permitted by the Terms.</p>\n<p>You may not (and You may not permit anyone else to): (a) copy, modify, create a derivative work of, reverse engineer, decompile or otherwise attempt to extract the source code of Sound Recorder or any part thereof, unless this is expressly permitted or required by law, or unless You have been specifically told that You may do so by Secret Source Technology, in writing (e.g., through an open source software license); or (b) attempt to disable or circumvent any security mechanisms used by Sound Recorder. To be clear, this product is open source and the source code is available for download. You may not use Sound Recorder in any way that is unlawful, illegal, fraudulent or harmful, or in connection with any unlawful, illegal, fraudulent or harmful purpose or activity.</p>\n<p>Open source software licenses for components of Sound Recorder released under an open source license constitute separate written agreements. To the limited extent that the open source software licenses expressly supersede these Terms, the open source licenses govern Your agreement with Secret Source Technology for the use of the components of Sound Recorder released under an open source license.</p>\n<h2 id=\"exclusionofwarranties\">Exclusion of warranties</h2>\n<ul>\n<li>You expressly understand and agree that your use of Sound Recorder is at your sole risk and that Sound Recorder is provided \"as is\" and \"as available.\".</li>\n<li>You agree that Secret Source Technology has no responsibility or liability for the deletion or failure to store any Content and other communications maintained or transmitted through use of Sound Recorder. You further acknowledge that You are solely responsible for securing and backing up Customer Recordings.</li>\n<li>Secret Source Technology does not warrant to you that: (a) your use of Sound Recorder will meet your requirements, (b) your use of Sound Recorder will be uninterrupted, timely, secure or free from error, (c) the results or data provided by Sound Recorder will be accurate, (d) the quality of Sound Recorder will meet your expectations and (e) any errors in Sound Recorder will be fixed.</li>\n</ul>\n<h2 id=\"limitationofliability\">Limitation of liability</h2>\n<p>You expressly understand and agree that Secret Source Technology, its subsidiaries and affiliates, and its licensors shall not be liable to you for any direct, indirect, incidental, special consequential or exemplary damages which may be incurred by you, however caused and under any theory of liability. This shall include, but not be limited to, any loss of profit (whether incurred directly or indirectly), any loss of goodwill or business reputation, any loss of data suffered, cost of procurement of substitute goods or services, or other intangible loss (whether or not Secret Source Technology has been advised of or should have been aware of the possibility of any such losses arising).</p>\n<h2 id=\"indemnification\">Indemnification</h2>\n<p>You agree to hold harmless and indemnify Secret Source Technology, and its subsidiaries, affiliates, officers, agents, employees, advertisers, licensors, suppliers or partners (collectively \"Secret Source Technology and Partners\") from and against any third party claim arising from or in any way related to (a) Your breach of the Terms, (b) Your use of Sound Recorder, (c) Your violation of applicable laws, rules or regulations in connection with Sound Recorder, or (d) Your Customer Recordings, including any liability or expense arising from all claims, losses, damages (actual and consequential), suits, judgments, litigation costs and attorneys' fees, of every kind and nature. In such a case, Secret Source Technology will provide You with written notice of such claim, suit or action.</p>\n<h2 id=\"generallegalterms\">General Legal Terms</h2>\n<p>The Terms constitute the whole legal agreement between You and Secret Source Technology and govern Your use of Sound Recorder and completely replace any prior agreements between You and Secret Source Technology in relation to Sound Recorder.</p>\n<p>You agree that if Secret Source Technology does not exercise or enforce any legal right or remedy which is contained in the Terms (or which Secret Source Technology has the benefit of under any applicable law), this will not be taken to be a formal waiver of Secret Source Technology's rights and that those rights or remedies will still be available to Secret Source Technology.</p>\n<p>Secret Source Technology shall not be liable for failing or delaying performance of its obligations resulting from any condition beyond its reasonable control, including but not limited to, governmental action, acts of terrorism, earthquake, fire, flood or other acts of God, labor conditions, power failures, and Internet disturbances.</p>\n<h2 id=\"privacypolicy\">Privacy Policy</h2>\n<p>Secret Source Technology will make every effort to protect data you transfer to us according to the Terms of Use above. However, we make zero warranty or guarantee over their safe return in the event of unauthorized access. As of this writing, this application does not track user activity in any way with the exception of potential cookies sent by hosting services. Sound Recorder and Secret Source Technology do not make any use of this data whatsoever. We do not even look at it if it exists!</p>\n    </div>\n  )\n}\n\nexport default TermsOfUse\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useRouteError } from \"react-router-dom\";\n\nexport default function ErrorPage() {\n  const error = useRouteError();\n  console.error(error);\n\n  return (\n    <div id=\"error-page\">\n      <h1>Oops!</h1>\n      <p>Sorry, an unexpected error has occurred.</p>\n      <p>\n        <i>{error.statusText || error.message}</i>\n      </p>\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport RecorderProvider from './components/RecorderProvider';\nimport TermsOfUse from './components/TermsOfUse';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  createHashRouter,\n  RouterProvider,\n  Route,\n} from \"react-router-dom\";\nimport ErrorPage from './404';\n\nconst router = createHashRouter([\n  {\n    path: \"/\",\n    element: <App />,\n    errorElement: <ErrorPage />,\n    children: [\n      {\n        path: \"terms-and-conditions\",\n        element: <TermsOfUse />,\n      },\n      {\n        path: \"/sound-recorder/\",\n        element: <RecorderProvider />,\n      },\n    ]\n  },\n]);\n\nReactDOM.render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}